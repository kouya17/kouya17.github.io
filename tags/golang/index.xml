<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>golang on kouya17.com</title><link>https://kouya17.com/tags/golang/</link><description>Recent content in golang on kouya17.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Mar 2023 15:33:00 +0900</lastBuildDate><atom:link href="https://kouya17.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>音声ライブ配信ができるWebアプリを作成した</title><link>https://kouya17.com/posts/wedio/</link><pubDate>Sun, 05 Mar 2023 15:33:00 +0900</pubDate><guid>https://kouya17.com/posts/wedio/</guid><description>デモ 本Webアプリは以下からアクセスできる。
動作時の動画は以下の通り。
機能一覧 WebRTCによる音声のインジェスト 連続稼働は30分まで HLSによる音声の配信 各配信ごとのチャットルームの作成・参加 配信終了1時間後のデータ自動削除 音声データの流れ 本アプリケーションにおける音声データの流れを図示すると以下のようになる。
付属機能補足 チャット チャットは簡易的にWebSocketを利用して実装している。
配信ごとのルーム管理のため、配信開始時に別プロセスでチャット用プログラムを都度実行する形になっている(&amp;ldquo;管理&amp;quot;といえるほどのものではない)。
データ自動削除 サーバー側で、音声ファイルが格納されているディレクトリの最終更新日時をcronで定期的に監視し、最終更新日時が1時間より前のものを削除している。</description></item><item><title>PostgreSQL+Echo+cron+Next.jsでWebスクレイピングシステムを構成する</title><link>https://kouya17.com/posts/real_estate_app/</link><pubDate>Thu, 26 Jan 2023 20:02:00 +0900</pubDate><guid>https://kouya17.com/posts/real_estate_app/</guid><description>今回作ったシステムのデモ 以下が今回作ったシステムの動作時の動画になる。
上の動画のように、情報を取得したい物件一覧が表示されるURL及びジョブを識別するためのタグを登録する。登録されたジョブはキューに保存される。上の動画では分からないが、ジョブは毎分1件ずつ実行される。
ジョブが実行され、システムに保存された情報は以下のような一覧画面から確認できる。
システムの全体構成図 本システムの全体構成は以下のようになっている。
以下4つの要素に分けてそれぞれDockerコンテナ化している。
Next.jsコンテナ Echoコンテナ cronコンテナ PostgreSQLコンテナ Webスクレイピングの流れ 本システムにおけるWebスクレイピングの流れは以下のとおりである。
ジョブを登録する データの取得先URLを登録する。このURLは、不動産情報サイトの検索結果ページを指定する。今は数種類のサイトに対応している。また、タグを指定することでそのジョブに名前のようなものをつけることができる。
過去に実行したものと同じ条件であれば再実行ボタンからも実行できる。
ジョブが実行される 登録されたジョブは1個ずつ順番に実行される。実行が開始されると、ジョブ一覧画面で対象ジョブのStatusがrunningに変化する。
ジョブは登録されたURLによって検索表示される不動産情報を1個ずつ、ある程度の時間間隔を空けながら取得する。すべての不動産情報が取得出来たら地価情報サイトから対象物件付近の地価(1平米あたり)を取得する。この情報もAreaPriceとして物件情報に含める。この地価情報と土地面積及び物件価格から建物の想定価格を計算し、EstimatedBuildingPriceとして物件情報に含める。なお、地価は頻繁に変わる情報ではないのでデータベースに保存しておき再利用する。
実行が終了するとジョブ一覧画面で対象ジョブのStatusがcompletedに変化する。
物件情報一覧画面から取得した物件情報を確認する 物件一覧ページにおいて、最新ジョブで取得された行は赤枠で表示される。検索欄でJobIdを範囲指定することもできるので、複数ジョブを実行した場合はそれらのジョブによって取得されたものを絞り込むこともできる。
なお、すでに登録されている物件URLと同じURLを持つ物件が取得された場合は、価格を比較する。価格が更新されていた場合は物件情報とJobIdを上書きする。
物件一覧において、行をクリックすると対象物件ページに遷移する。対象物件をクリックした回数も保持しており、1回以上クリックした物件は黄色で塗りつぶされて表示される。そのため、過去自分が詳細をチェックした物件かどうか一目で見分けがつくようになっている。
ソースコード</description></item><item><title>VTuberの簡易ランキングサイトを作った</title><link>https://kouya17.com/posts/17/</link><pubDate>Fri, 17 Jan 2020 23:02:41 +0900</pubDate><guid>https://kouya17.com/posts/17/</guid><description>概要 適当に抽出したVTuberについて、チャンネル登録者数増加数のランキングサイトを作成した。
1日1回、午前5時30分ごろ更新。
構成 Golang + Gin + Bootstrap
雑記 Golangを使ったwebアプリを初めて作成した。Golangは未使用の変数、importがデフォルトでコンパイルエラーになるのが印象的だった。ルールが厳格な印象。
YouTubeの現在の仕様で、チャンネル登録者数が多いほど、刻み幅が大きくなる。その刻み幅分を超えないと、増加量が0になってしまうので、1日単位だと正確なランキングにならない。
今回のサイトを作るにあたって、既存サイトを調べてみた。色々凝っているサイトが多数あった。やはりここら辺(YouTube周り)は色んなビジネスが成り立っているんだろうなと思った。
改訂2版 みんなのGo言語 技術評論社 Amazon Kindle 楽天 楽天Kobo</description></item><item><title>GitHub Pagesを使って静的サイトを公開した</title><link>https://kouya17.com/posts/4/</link><pubDate>Thu, 02 May 2019 15:04:03 +0900</pubDate><guid>https://kouya17.com/posts/4/</guid><description>概要 GitHub Pagesを使って簡易ブログを公開しました。
https://kouya17.github.io
構成 公開環境：GitHub Pages
静的サイトジェネレータ：Hugo
テンプレートテーマ：aether
雑記 無料でサイト公開できるのはすごい。
静的サイトジェネレータとしてHexoも検討したが、ネット上の情報が中国語中心だったため断念した。
作成物に関する投稿はGitHub Pagesのほうにして、こちらはより雑多なものを扱うことにする。
独習Git 翔泳社 Amazon Kindle 楽天 楽天Kobo</description></item></channel></rss>