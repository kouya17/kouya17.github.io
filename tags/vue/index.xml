<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vue on kouya17.com</title><link>https://kouya17.github.io/tech-blog/tags/vue/</link><description>Recent content in Vue on kouya17.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 May 2020 19:45:05 +0900</lastBuildDate><atom:link href="https://kouya17.github.io/tech-blog/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue.jsでローディング表示を実装する</title><link>https://kouya17.github.io/tech-blog/posts/26/</link><pubDate>Wed, 06 May 2020 19:45:05 +0900</pubDate><guid>https://kouya17.github.io/tech-blog/posts/26/</guid><description>ローディング表示モジュールの調査 vue.jsでローディング表示を行う場合、ローディング表示に関係するモジュールについて調査する。 出来れば、
実装が簡単 よく見かけるような見た目(独自性がない) メンテされている という条件にあてはまるものを採用したい。
調べた結果を以下の表にまとめた。
名前 種類 GitHub Star 最終更新(2020/05/06時点) 備考 vue-loading Vueコンポーネント 2018/12/22 紹介している記事が多い vue-spinner Vueコンポーネント 2017/10/07 Vue2.0をサポートしていない Single Element CSS Spinners css 2019/12/09 よく見かける見た目 vue-loading-overlay Vueコンポーネント 2020/04/18 全画面に表示するらしい vue-wait Vueコンポーネント 2019/10/08 だいぶ機能がリッチそう ajaxload.info gif - - よく見かける見た目 調べて出てきた候補は以上。</description></item><item><title>Vue.jsを使ったSPAにおいてTwitter等でのリンク表示がいい感じになるようにする</title><link>https://kouya17.github.io/tech-blog/posts/22/</link><pubDate>Sat, 25 Apr 2020 10:47:59 +0900</pubDate><guid>https://kouya17.github.io/tech-blog/posts/22/</guid><description>Vue.jsでSPAを構成した際、TwitterなどのOGPが上手く表示されなかったので、対処した。
SPAとは?→シングルページアプリケーション この記事で扱っているSPAとは、シングルページアプリケーションを指す。
SPAについては少し以下の記事で触れたが、詳細は他のサイトの方が詳しいと思う。
OGPとは?→Webページのリンクを表示する仕組み OGPとはOpen Graph Protocolの略で、TwitterとかFacebookとかでリンクがいい感じに表示されるアレに使われているプロトコルのこと。
↓これ。
Chart.jsで横軸が日付のグラフを作成する https://t.co/evu4HqqQ4f @aoki_kouyaさんから
&amp;mdash; 青木晃也 (@aoki_kouya) April 4, 2020 webサイトをいちから作る際、OGP対応していないと、Twitterとかでリンクを貼り付けても画像や説明文は表示されない。
そこらへんはTwitter側でなんとかしてくれるわけではなく、サイト作成者側が適切にOGP設定を行う必要がある。
SPAの場合はOGP設定にひと工夫必要 OGPは、具体的にはHTMLにmetaタグを設定することで対応できる。
例えば、以下のようなmetaタグを&amp;lt;head&amp;gt;要素内に設定する。
上記は私が作成したサイトの実装例になるが、他のサイトを調べると、head要素にprefix属性を適切に設定する必要があるようだ。
私は設定していなかったが、とりあえずTwitterあたりでは問題なく動いているように見える。
まあ、正しい対応ではないと思う。
このOGP設定だが、SPAの場合はひと工夫必要になる。
理由は、OGPによってリンクを作成する際、JavaScriptが動かないケースがあるため。
OGPによってリンクを表示する際、クローラーと呼ばれるプログラムによって、リンク先のページをスキャンする。
スキャン結果に従ってリンクを表示するのだが、TwitterやFacebookのクローラーはJavaScriptを実行してくれないらしい。
よって、JavaScriptによってmetaタグを生成しても、リンクには反映されない。
SPAでOGP設定を適切に行う場合はここら辺の対処が必要。
今回は特定条件時のみ静的ページを返すように実装 今回の結論、解決策になる。
調べてみると、(Vue.jsを用いた)SPAでのOGP設定については色々対応策があった。
いくつか参考にさせていただいたページを挙げておく。
上記のページの方法はページ内にも書かれている通り、全てのページで同じ内容のOGPになってしまう。
今回はそれぞれのページで異なるOGPを設定したいため、同じ方法はとらなかった。
上記のページは詳しく書いてあり、参考になりそうだったが、Firebaseを使ってない、使ったことがないため今回は同じ方法をとれなかった。
最終的には以下のページの方法を真似させていただいた。
上のページの方法は、TwitterやFacebookなど特定のクローラーに対してのみOGP対応用のテンプレートを返すというものになっている。
アプローチとしては一番最初に挙げたページと同じだが、こちらはクローラー検出用にControllerを作成して、テンプレートの出し分けをしている。
比較的容易に実装でき、ページごとに異なるOGP設定ができそうだったため、こちらの方法を採用した。
この方法の課題としては、OGP対応用のテンプレートを返す相手をピンポイントで指定する必要があるため、明示的に指定したクローラー以外に対しては対応できない点がある。
また、OGP対応用のControllerを新規に作成する必要があり、Controllerが単純に1個増える。
なお、各サービスのクローラーの情報は以下のサイトを参考にさせていただいた。
雑記 Twitterでのリンク表示内容確認には以下の公式のサイトが便利。
これからはじめるVue.js実践入門 山田 祥寛 Amazon Kindle 楽天 楽天Kobo</description></item><item><title>Laravel+Vue.jsでSPA(シングルページアプリケーション)を作成した</title><link>https://kouya17.github.io/tech-blog/posts/20/</link><pubDate>Sun, 15 Mar 2020 22:59:47 +0900</pubDate><guid>https://kouya17.github.io/tech-blog/posts/20/</guid><description>今回作成したサイト 今回作成したサイトは以下のサイト。
ClubPage
私が所属している電子工作サークルのホームページを作った。
このブログからcssを流用しているので、見た目がだいぶ似ている。
構成 Laravel Vue.js バックエンドはLaravel、フロントエンドはVue.jsを使っている。
シングルページアプリケーションとは 今回はシングルページアプリケーション(SPA)という構成を採用した。
シングルページアプリケーションとは
シングルページアプリケーション（英: single-page application、SPA）とは、単一のWebページのみから構成することで、デスクトップアプリケーションのようなユーザ体験を提供するWebアプリケーションまたはWebサイトである。必要なコード（HTML、JavaScript、CSS）は最初にまとめて読み込むか[1]、ユーザの操作などに応じて動的にサーバと通信し、必要なものだけ読み込みを行う。 Wikipediaより
というものらしい。
これまでRuby on RailsやDjangoとかを使ってwebサイトを作ってみてきたが、どれも各ページ毎に、サーバ側でHTMLの生成を行うマルチページアプリケーションだった。
今回はLaravelでwebAPIを作成し、そのAPIから取得した情報を、Vue.jsを使ってブラウザ上に表示するような構成にした。
なぜSPAにしたのか 理由は1つで、今回参考にしたサイトがSPAを採用していたから。
今回参考にしたサイトは以下のサイト。
このサイトにあるチュートリアル、書かれている情報量がかなり多くて、これだけの情報をタダで得られるのが信じられない。
今回初めてLaravelとVue.jsを触ったが、このサイトのおかげで色々と基礎を学ぶことができた。
今回学んだこと、感じたこと インタフェース部とエンジン部の分離はやはり重要 今回の構成はAPI(Laravel)と表示部(Vue.js)を分離している。
たとえばhttps://home.lchika.club/api/tagsにアクセスすれば、Laravelの機能によって、タグの一覧をJSON形式で取得できる。
こういったAPIから取得した情報をVue.jsで処理して、ブラウザにレンダリングする。
このように分離することで、UIを変えたいときは、基本的にVue.jsの部分のみを修正するだけですむ。
Laravelの処理部は一切手を加える必要がない。
まあ、一般的なwebフレームワークを使っていれば、実装の分離は適切に行われているが、ある一部分のフレームワークをごっそり切り替えることはできない。
今回の構成では、例えばフロントエンドにReactを使いたければ、Laravel部分はそのままで、フロントエンド部分をごっそり切り替えられる(と思うけど、Laravel-mixとかの関係で難しいのかもしれない&amp;hellip;)。
このように、インタフェースとエンジン部の分離で得られる効果はやはりでかいなと思った。
ローディング表示がないとwebサイトの質が落ちる これは個人的な印象かもしれないが、ローディング画面の表示はユーザにとって(ある程度)重要だなと思った。
現状ではローディング表示は実装していないため、読み込み直後は一部のコンテンツが表示されていないし、一部のコンテンツについては結構な時間表示されないことがある。
これはサイト利用者側からすると、違和感を覚える要因になり、満足度の低下につながると思った。
YouTubeとかもローディング中はコンテンツ表示部をグレーで表示したりしている。
最初はこれ意味あるのか?と思っていたが、今回自分でJavaScriptを多用したサイトを構築してみて、こういった対応も重要だなと思った。
WYSIWYGエディタの選定は毎回の課題 今回はブログのようなサイトを構築したので、フォームから記事を投稿できる必要があった。
さすがにHTML直打ちで入力はできないし、リッチテキストエディタを採用する必要があった。
毎回どのリッチテキストエディタを使うか苦労するが、今回も例に漏れず苦労した。
とりあえず今のところはCKEditorを使っている。
ただ、まだ課題があって、iframeの挿入が上手くいっていない。
いつも大体、リッチテキストエディタまわりは
画像の挿入 画像の整形 外部コンテンツの挿入 目次の作成 あたりで詰まっている。
今回はまだ目次の作成について考えていないので、目次が必要になった時に多分また詰まる。
SPAのパフォーマンス向上はバンドルサイズの削減こそ正義 今回作成したサイトのパフォーマンス向上については以下の記事に書いた。
最初特に何も考えずにサイトを作っていたら、パフォーマンスが崩壊した。
今もパフォーマンスが良いとは言えないが、バンドルサイズを削減することで、パフォーマンスが向上した。
こういったパフォーマンス向上のための施策は必要不可欠だなと感じた。
まとめ 今回はLaravelとVue.jsを使ってサイトを作った。</description></item><item><title>Laravel+Vue.jsでLighthouseのスコアを0点から97点にした(バンドルサイズ削減)</title><link>https://kouya17.github.io/tech-blog/posts/19/</link><pubDate>Sun, 08 Mar 2020 17:05:20 +0900</pubDate><guid>https://kouya17.github.io/tech-blog/posts/19/</guid><description>Laravel+Vue.jsで作成していたwebサイトの応答速度が激遅だったので、対策を実施した。
環境 Laravel 6.14.0 Vue.js 2.6.11 対策前はページロードに20秒かかっていた 特に何も考えずにwebサイトを作っていたら、トップページのロードに20秒ほどかかっていた。 これではさすがにwebサイトとして成立しない。
Googleが提供しているwebページ分析ツールLighthouseを使ってパフォーマンスの測定を行ったところ、以下のような結果になった。
堂々の0点である。提示されている対応策の詳細を見ると、以下のように書かれていた。
どうやらバンドル後のapp.jsのサイズが約4MBと、超巨大になっているらしい。対応策としてapp.jsのサイズ削減を行った。
対策1：本番用ビルド設定を適用する バンドルサイズ 3.86MB(app.js) → 1.59MB(app.js)
解説 そもそもビルド設定が間違っていた…。ビルドコマンドとして
npm run dev を実行していたが、これは開発用のビルドコマンドらしい。
本番用のビルドコマンド
npm run prod を実行したところ、バンドルサイズは3.86MB→1.59MBと、約40%になった。
Lighthouseの結果 0点→10点に上昇した。
対策2：gzipで圧縮する バンドルサイズ 1.59MB(app.js) → 395KB(app.js.gz)
解説 以下のページを参考に、gzipでapp.jsを圧縮した。
そのままコピペで適用できた。
Lighthouseの結果 10点→63点に上昇した。
対策3：ページごとにJSファイルを分割する バンドルサイズ 395KB(app.js.gz) → 243KB(app.js.gz)
解説 以下のページを参考に、ページごとにJSファイルを分割した。
こちらも特に詰まることはなく、ほぼコピペで実装できた。
この対策を実装したことで、ビルド後のJSファイルが以下のように、分割されて生成されるようになった。
Lighthouseの結果 63点→87点に上昇した。
対策4：bootstrap-vueの選択的インポート バンドルサイズ 243KB(app.js.gz) → 129KB(app.js.gz)
解説 対策1～3で、あらかた大きなところは対策できたと思ったので、より細かいところを対応するため、webpack-bundle-analyzerを使ってバンドル結果の分析をした。
webpack-bundle-analyzerの出力結果は以下のようになった。
この結果から
bootstrap-vue ckeditor lodash あたりのサイズが大きいらしいことが分かった。</description></item></channel></rss>